import React, { createContext, ReactNode, useContext, useState } from "react";

// –¢–∏–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
export type Pet = {
  id: string;
  name?: string;
  gender?: string;
  birthdate?: string;
  chip?: string;
  breed?: string;
  weight?: string;
  height?: string;
  color?: string;
  note?: string;
  imageUri?: string;
  bigNote?: string;
  category?: string;
  pasportName?: string; // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª–µ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏
};

// –¢–∏–ø —Ñ–æ—Ä–º—ã –±–µ–∑ id
export type PetForm = Omit<Pet, "id">;

// –¢–∏–ø –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
export type PetEvent = {
  title: string;
  date: string;
};

interface PetContextType {
  pets: Pet[];
  setPets: React.Dispatch<React.SetStateAction<Pet[]>>;
  selectedPetId: string | null;
  setSelectedPetId: (id: string | null) => void;
  selectedPet: Pet | null;
  selectedPetEvents: PetEvent[];
  allEvents: Record<string, PetEvent[]>;
  formData: PetForm;
  setFormData: React.Dispatch<React.SetStateAction<PetForm>>;
  addPet: () => void;
  addEvent: (petId: string, event: PetEvent) => void;
  removePet: (id: string) => void;
  updateEvent: (petId: string, index: number, updatedEvent: PetEvent) => void;
  deleteEvent: (petId: string, index: number) => void;
  user: { id: string; name: string } | null;
}

const PetContext = createContext<PetContextType | null>(null);

interface PetProviderProps {
  children: ReactNode;
}

// –ú–æ–∫–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const mockUser = { id: "u1", name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" };

// –ú–æ–∫–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã
const mockPets: Pet[] = [
  // üê± –î–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã
  {
    id: "1",
    name: "–ë–∞—Ä—Å–∏–∫",
    pasportName: "–ë–∞—Ä—Å–∏–∫ –ë–∞—Ä—Å–æ–≤–∏—á",
    gender: "–º—É–∂—Å–∫–æ–π",
    birthdate: "2019-05-12",
    chip: "001234567",
    breed: "—Å–∏–±–∏—Ä—Å–∫–∞—è",
    weight: "6",
    height: "28",
    color: "—Å–µ—Ä—ã–π",
    note: "–ª—é–±–∏—Ç –ª–∞–∑–∞—Ç—å –ø–æ —à–∫–∞—Ñ–∞–º",
    category: "–¥–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã",
  },
  {
    id: "2",
    name: "–ú—É—Ä–∫–∞",
    pasportName: "–ú—É—Ä–∫–∞ –ú—É—Ä–∫–∏–Ω–∞",
    gender: "–∂–µ–Ω—Å–∫–∏–π",
    birthdate: "2021-08-03",
    chip: "009876543",
    breed: "–±—Ä–∏—Ç–∞–Ω—Å–∫–∞—è",
    weight: "4",
    height: "25",
    color: "–≥–æ–ª—É–±–æ–π",
    note: "–æ—á–µ–Ω—å –ª–∞—Å–∫–æ–≤–∞—è",
    category: "–¥–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã",
  },
  {
    id: "3",
    name: "–†–µ–∫—Å",
    pasportName: "–†–µ–∫—Å –†–µ–∫—Å–æ–≤–∏—á",
    gender: "–º—É–∂—Å–∫–æ–π",
    birthdate: "2020-02-20",
    chip: "002345678",
    breed: "–Ω–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞",
    weight: "32",
    height: "60",
    color: "—á–µ—Ä–Ω—ã–π —Å —Ä—ã–∂–∏–º",
    note: "—Å–ª—É–∂–µ–±–Ω–∞—è —Å–æ–±–∞–∫–∞",
    category: "–¥–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã",
  },
  {
    id: "4",
    name: "–õ–∞–∫–∏",
    pasportName: "–õ–∞–∫–∏ –õ–∞–∫–∏–Ω–∞",
    gender: "–∂–µ–Ω—Å–∫–∏–π",
    birthdate: "2022-06-14",
    chip: "004567890",
    breed: "–π–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä",
    weight: "3",
    height: "23",
    color: "–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π",
    note: "–±–æ–∏—Ç—Å—è –≥—Ä–æ–º–∫–∏—Ö –∑–≤—É–∫–æ–≤",
    category: "–¥–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã",
  },

  // üê¥ –ö—Ä—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
  {
    id: "11",
    name: "–ì—Ä–æ–∑–∞",
    pasportName: "–ì—Ä–æ–∑–∞ –ì—Ä–æ–∑–æ–≤–∏—á",
    gender: "–º—É–∂—Å–∫–æ–π",
    birthdate: "2016-04-01",
    chip: "100123456",
    breed: "—Ä—ã—Å–∞–∫",
    weight: "450",
    height: "165",
    color: "–≤–æ—Ä–æ–Ω–∞—è",
    note: "–±—ã—Å—Ç—Ä—ã–π –±–µ–≥—É–Ω",
    category: "–∫—Ä—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
  },
  {
    id: "12",
    name: "–ó–æ—Ä—å–∫–∞",
    pasportName: "–ó–æ—Ä—å–∫–∞ –ó–æ—Ä—å–∫–∏–Ω–∞",
    gender: "–∂–µ–Ω—Å–∫–∏–π",
    birthdate: "2018-07-21",
    chip: "100987654",
    breed: "–∞–π—Ä—à–∏—Ä—Å–∫–∞—è –∫–æ—Ä–æ–≤–∞",
    weight: "550",
    height: "140",
    color: "—Ä—ã–∂–µ-–±–µ–ª–∞—è",
    note: "–¥–∞–µ—Ç –º–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞",
    category: "–∫—Ä—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
  },

  // üïä –ü—Ç–∏—Ü—ã
  {
    id: "21",
    name: "–ö–µ—à–∞",
    pasportName: "–ö–µ—à–∞ –ö–µ—à–∏–Ω",
    gender: "–º—É–∂—Å–∫–æ–π",
    birthdate: "2022-03-11",
    chip: "200123456",
    breed: "–≤–æ–ª–Ω–∏—Å—Ç—ã–π –ø–æ–ø—É–≥–∞–π",
    weight: "0.05",
    height: "18",
    color: "–∑–µ–ª—ë–Ω—ã–π",
    note: "–ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–ª–æ–≤–∞",
    category: "–ø—Ç–∏—Ü—ã",
  },
  {
    id: "22",
    name: "–°–Ω–µ–∂–∏–Ω–∫–∞",
    pasportName: "–°–Ω–µ–∂–∏–Ω–∫–∞ –°–Ω–µ–∂–∏–Ω–∫–∏–Ω–∞",
    gender: "–∂–µ–Ω—Å–∫–∏–π",
    birthdate: "2021-12-30",
    chip: "200987654",
    breed: "–∫–∞–Ω–∞—Ä–µ–π–∫–∞",
    weight: "0.02",
    height: "15",
    color: "–∂—ë–ª—Ç—ã–π",
    note: "–ø–æ—ë—Ç –ø–æ —É—Ç—Ä–∞–º",
    category: "–ø—Ç–∏—Ü—ã",
  },

  // üêπ –ú–µ–ª–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
  {
    id: "27",
    name: "–®—É—à–∞",
    pasportName: "–®—É—à–∞ –®—É—à–∏–Ω–∞",
    gender: "–∂–µ–Ω—Å–∫–∏–π",
    birthdate: "2023-05-05",
    chip: "300123456",
    breed: "—à–∏–Ω—à–∏–ª–ª–∞",
    weight: "0.6",
    height: "20",
    color: "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    note: "–æ—á–µ–Ω—å –ø—É—à–∏—Å—Ç–∞—è",
    category: "–º–µ–ª–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
  },
  {
    id: "28",
    name: "–ü—É—Ö–ª–∏–∫",
    pasportName: "–ü—É—Ö–ª–∏–∫ –ü—É—Ö–ª–∏–∫–æ–≤–∏—á",
    gender: "–º—É–∂—Å–∫–æ–π",
    birthdate: "2023-09-09",
    chip: "300987654",
    breed: "—Ö–æ–º—è–∫",
    weight: "0.1",
    height: "8",
    color: "–±–µ–ª—ã–π",
    note: "–ª—é–±–∏—Ç –±–µ–≥–∞—Ç—å –≤ –∫–æ–ª–µ—Å–µ",
    category: "–º–µ–ª–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
  },
];


export const PetProvider = ({ children }: PetProviderProps) => {
  const [pets, setPets] = useState<Pet[]>(mockPets);
  const [selectedPetId, setSelectedPetId] = useState<string | null>(mockPets[0]?.id || null);
  const [user] = useState(mockUser);

  const { id, ...firstPetForm } = mockPets[0] || {};
  const [formData, setFormData] = useState<PetForm>(firstPetForm);

  const [events, setEvents] = useState<Record<string, PetEvent[]>>({});

  const addPet = () => {
    if (!formData.name) return;

    const newPet: Pet = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
      ...formData,
    };

    setPets((prev) => [...prev, newPet]);

    setFormData({
      name: "",
      gender: "",
      birthdate: "",
      chip: "",
      breed: "",
      weight: "",
      height: "",
      color: "",
      note: "",
      imageUri: "",
      bigNote: "",
      category: "", // ‚úÖ —Å–±—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    });
  };

  const addEvent = (petId: string, event: PetEvent) => {
    if (!event.title || !event.date) return;

    setEvents((prev) => ({
      ...prev,
      [petId]: [...(prev[petId] || []), event],
    }));
  };

  const removePet = (id: string) => {
    setPets((prev) => prev.filter((pet) => pet.id !== id));
    setEvents((prev) => {
      const updated = { ...prev };
      delete updated[id];
      return updated;
    });
    if (selectedPetId === id) setSelectedPetId(null);
  };

  const updateEvent = (petId: string, index: number, updatedEvent: PetEvent) => {
    setEvents((prev) => {
      const updatedEvents = [...(prev[petId] || [])];
      updatedEvents[index] = updatedEvent;
      return { ...prev, [petId]: updatedEvents };
    });
  };

  const deleteEvent = (petId: string, index: number) => {
    setEvents((prev) => {
      const updatedEvents = [...(prev[petId] || [])];
      updatedEvents.splice(index, 1);
      return { ...prev, [petId]: updatedEvents };
    });
  };

  const selectedPet = pets.find((pet) => pet.id === selectedPetId) || null;
  const selectedPetEvents = events[selectedPetId ?? ""] || [];

  return (
    <PetContext.Provider
      value={{
        pets,
        setPets,
        selectedPetId,
        setSelectedPetId,
        selectedPet,
        selectedPetEvents,
        allEvents: events,
        formData,
        setFormData,
        addPet,
        addEvent,
        removePet,
        updateEvent,
        deleteEvent,
        user,
      }}
    >
      {children}
    </PetContext.Provider>
  );
};

export const usePetContext = (): PetContextType => {
  const context = useContext(PetContext);
  if (!context) throw new Error("usePetContext must be used within a PetProvider");
  return context;
};
